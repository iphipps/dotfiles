if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if [ -f ~/.linux_zshrc ]; then
    . ~/.linux_zshrc
  fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
  if [ -f ~/.mac_zshrc ]; then
    . ~/.mac_zshrc
  fi
fi


# Syntax highlighting bundle - https://github.com/zsh-users/zsh-syntax-highlighting
zplug "zsh-users/zsh-syntax-highlighting"

# auto complete suggestions - https://github.com/zsh-users/zsh-autosuggestions
zplug "zsh-users/zsh-autosuggestions"

# let zplug manage itself
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# git plugs
zplug 'wfxr/forgit'

# theme
zplug mafredri/zsh-async, from:github
zplug sindresorhus/pure, use:pure.zsh, from:github, as:theme

# Install any plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load > /dev/null

# enable vim mode 
bindkey -v


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="$HOME/.cargo/bin:$PATH"


export PATH=$HOME/bin:/usr/local/bin:$PATH
if [ -f ~/.local_zshrc ]; then
 . ~/.local_zshrc
fi





# make zsh history save
HISTFILESIZE=1000000
HISTSIZE=1000000
HISTIGNORE='ls:cat:clear:pwd'
HISTCONTROL=erasedups
HISTFILE=~/.zsh_history
SAVEHIST=5000
setopt appendhistory
setopt sharehistory
setopt incappendhistory

autoload -U colors && colors
export PS1="%* %{$fg[blue]%}%n%{$reset_color%}@%{$fg[green]%}%m:%{$reset_color%}%{$fg[red]%}%~%{$reset_color%}$ "


alias ls='ls -GFh -a'

alias gs="git status"

export N_PREFIX="$HOME/n"
export PATH=$N_PREFIX/bin:$PATH



export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

export FZF_DEFAULT_OPS="--extended"
#export FZF_DEFAULT_COMMAND="fd --hidden --type f --ignore-file ~/.ignore"
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || bat {} || tree -C {}) 2> /dev/null | head -200'"
#export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# # # Load fuzzy find.
export FZF_CTRL_T_COMMAND='rg --files --hidden'

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
}

bind-git-helper f b t r h
unset -f bind-git-helper

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source ~/.fzf/shell/key-bindings.zsh


